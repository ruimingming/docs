(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{418:function(a,t,r){"use strict";r.r(t);var v=r(5),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"为什么javascript是单线程？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么javascript是单线程？"}},[a._v("#")]),a._v(" 为什么JavaScript是单线程？")]),a._v(" "),r("p",[a._v("javascript从诞生之日起就是一门"),r("code",[a._v("单线程的非阻塞")]),a._v("的脚本语言，单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。")]),a._v(" "),r("p",[a._v("单线程是必要的，也是javascript这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的dom操作。试想一下 如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如一个向其添加事件，而另一个删除了这个dom，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，javascript选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。")]),a._v(" "),r("p",[a._v("为了利用多核CPU的计算能力，HTML5提出"),r("code",[a._v("Web Worker")]),a._v("标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。")]),a._v(" "),r("p",[a._v("然而，使用web worker技术开的多线程有着诸多限制，例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。")]),a._v(" "),r("p",[a._v("可以预见，未来的javascript也会一直是一门单线程的语言。")])])}),[],!1,null,null,null);t.default=s.exports}}]);